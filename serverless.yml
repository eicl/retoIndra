service: medical-appointment

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  environment:
    MYSQL_HOST: ${env:RDS_HOST}
    MYSQL_USER: ${env:RDS_USER}
    MYSQL_PASSWORD: ${env:RDS_PASSWORD}
    MYSQL_DATABASE: ${env:RDS_DATABASE}
    DYNAMODB_TABLE: ${env:DYNAMODB_TABLE}
    SNS_ARN_PE: ${env:SNS_ARN_PE}
    SNS_ARN_CL: ${env:SNS_ARN_CL}
    SQS_ARN_PE: ${env:SQS_ARN_PE}
    SQS_ARN_CL: ${env:SQS_ARN_CL}
    SQS_URLPE: ${env:SQS_URLPE}
    SQS_URLCL: ${env:SQS_URLCL}
    EVENT_BUS_NAME: ${env:EVENT_BUS_NAME}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
      Resource: "*"
    - Effect: Allow
      Action:
        - sns:Publish
        - sns:CreateTopic
        - sns:Subscribe
        - sns:ListSubscriptions
        - sns:ListSubscriptionsByTopic
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - !GetAtt SQSPE.Arn
        - !GetAtt SQSCL.Arn
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: "*"
    - Effect: Allow
      Action:
        - rds:DescribeDBInstances
        - rds:Connect
      Resource: "*"

functions:
  appointment:
    handler: src/lambdas/appointment.handler
    events:
      - http:
          path: appointments
          method: post
          documentation:
            summary: Agendar una cita
            description: Agrega una nueva cita a la base de datos.
            operationId: createAppointment
            requestBody:
              description: Información de la cita
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      insuredId:
                        type: string
                      date:
                        type: string
                        format: date-time
                      doctorId:
                        type: string
                      status:
                        type: string
                        enum:
                          - pending
                          - completed
            responses:
              200:
                description: Cita creada exitosamente
              400:
                description: Parámetros inválidos
      - http:
          path: appointments/{insuredId}
          method: get
          documentation:
            summary: Obtener citas de un asegurado
            description: Recupera las citas agendadas de un asegurado.
            operationId: getAppointments
            parameters:
              - name: insuredId
                in: path
                required: true
                description: ID del asegurado.
                schema:
                  type: string
            responses:
              200:
                description: Lista de citas
              404:
                description: No se encontraron citas
      - sqs:
          arn:
            Fn::GetAtt: [ConfirmationsQueue, Arn]
          batchSize: 5

  appointmentPE:
    handler: src/lambdas/appointmentPE.appointmentPE
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSPE, Arn]
          batchSize: 5
      - eventBridge:
          eventBus: 
            Ref: AppointmentEventBus
          pattern:
            source:
              - "appointment"
            detail-type:
              - "appointment-success"

  appointmentCL:
    handler: src/lambdas/appointmentCL.appointmentCL
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSCL, Arn]
          batchSize: 5
      - eventBridge:
          eventBus: 
            Ref: AppointmentEventBus
          pattern:
            source:
              - "appointment"
            detail-type:
              - "appointment-success"

resources:
  Resources:
    SNSPE:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: SNSPE

    SNSCL:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: SNSCL

    SQSPE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQSPE

    SQSCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQSCL

    AppointmentEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: AppointmentEventBus

    ConfirmationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: appointment_confirmations

    SNSSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSPE
        Protocol: sqs
        Endpoint: !GetAtt SQSPE.Arn  # Usamos el ARN de la cola SQS directamente
        FilterPolicy:
          countryISO: ["PE"]

    SNSSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSCL # Utilizando la referencia del topic SNS
        Protocol: sqs
        Endpoint: !GetAtt SQSCL.Arn # Usamos el ARN de la cola SQS directamente
        FilterPolicy:
          countryISO: ["CL"]
    
#    AppointmentEventBridgeRule:
#       Type: AWS::Events::Rule
#       Properties:
#         EventBusName:
#           Ref: AppointmentEventBus
#         EventPattern:
#           Source:
#             - "appointment"
#           DetailType:
#             - "appointment-success"
#         Targets:
#           - Arn:
#               Fn::GetAtt: [ConfirmationsQueue, Arn]
#             Id: "ConfirmationsQueue"
#             SqsParameters:
#               MessageGroupId: "appointment-group"

plugins:
  - serverless-offline
  - serverless-openapi-documentation
  - serverless-aws-documentation

custom:
  openApiDocumentation:
    docName: api-docs # Nombre del archivo de documentación
    version: 1.0.0
    description: API de agendamiento de citas médicas.
    servers:
      - url: https://api.medical-appointment.com/${self:provider.stage}
        description: API de producción

# Configuración para generar automáticamente la documentación
swagger:
  autoHeaders: true
  autoResponse: true
  autoSchema: true
  output: './swagger-output.json'  
